// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlserver"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Book {
    id          Int        @id @default(autoincrement())
    title       String?
    description String?
    category1   String?
    category2   String?
    folder      Folder?    @relation(fields: [folderId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    folderId    Int?
    subfolder   SubFolder? @relation(fields: [subFolderId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    subFolderId Int?
    library     Library?   @relation(fields: [libraryId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    libraryId   Int?
    fileUrl     String?    @unique
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model Library {
    id          Int         @id @default(autoincrement())
    name        String      @unique
    description String?
    private     Boolean     @default(false)
    books       Book[]
    subFolders  SubFolder[]
}

model Folder {
    id          Int         @id @default(autoincrement())
    name        String      @unique
    description String?
    books       Book[]
    subFolders  SubFolder[]
}

model SubFolder {
    id          Int      @id @default(autoincrement())
    name        String   
    description String?
    books       Book[]
    folderId    Int?
    folder      Folder?  @relation(fields: [folderId], references: [id])
    Library     Library? @relation(fields: [libraryId], references: [id])
    libraryId   Int?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    username      String    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
